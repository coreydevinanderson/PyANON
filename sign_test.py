# -*- coding: utf-8 -*-
"""sign_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7AI_KMU1EYkqXYSMSpFOH36qt0ZA5Ky
"""

import numpy as np
from scipy.stats import binom
import statistics as st

def sign_test(x, y = None, md = 0, alternative = "two_sided"):

  # One sample sign test
  if y is None:
    
    x_minus_md = [(i - md) for i in x]
    x_md_clean = [j for j in x_minus_md if j != 0]  # remove the zeroes
    n_adj = len(x_md_clean)  # sample size after removing the zeroes
    pos_count = len([k for k in x_md_clean if k > 0])

    med_count = st.median(np.arange(0, n_adj + 1))
    
    if (n_adj / 2) == pos_count:
      exception = True
    else:
      exception = False
    
    if (alternative == "two_sided") and (exception == True):
      p_val = 1
    elif (alternative == "two_sided") and (exception == False) and (pos_count >= med_count):
      p_val = 2 * (1 - binom.cdf((pos_count - 1), n_adj, 0.5))
    elif (alternative == "two_sided") and (exception == False) and (pos_count < med_count):
      p_val = 2 * binom.cdf(pos_count, n_adj, 0.5)
  
    if alternative == "greater":
      p_val = 1 - binom.cdf(pos_count, n_adj, 0.5)
    elif alternative == "less":
      p_val = binom.cdf(pos_count, n_adj, 0.5)
      
  # Paired sign test
  elif y is not None:
    
    xx = np.array(x)
    yy = np.array(y)
    diff = xx - yy
    diff_list = diff.tolist()
    diff_clean = [j for j in diff_list if j != 0]
    n_adj = len(diff_clean)
    pos_count = len([k for k in diff_clean if k > 0])

    med_count = st.median(np.arange(0, n_adj + 1))

    if (n_adj / 2) == pos_count:
      exception = True
    else:
      exception = False

    if (alternative == "two_sided") and (exception == True):
      p_val = 1
    elif (alternative == "two_sided") and (exception == False) and (pos_count >= med_count):
      p_val = 2 * (1 - binom.cdf((pos_count - 1), n_adj, 0.5))
    elif (alternative == "two_sided") and (exception == False) and (pos_count < med_count):
      p_val = 2 * binom.cdf(pos_count, n_adj, 0.5)

    if alternative == "greater":
      p_val = 1 - binom.cdf(pos_count, n_adj, 0.5)
    elif alternative == "less":
      p_val = binom.cdf(pos_count, n_adj, 0.5)
 
  out_dict = {"s": pos_count, 
              "n_adj": n_adj, 
              "n": len(x), 
              "P_value": p_val}

  print(f"Number of positives: {pos_count} out of a sample size of {n_adj}")
  return out_dict