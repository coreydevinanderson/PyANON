# -*- coding: utf-8 -*-
"""paired_permute.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19s1Njx98WGdOTqT22FSTfaLXRgfI7Dzx
"""

import numpy as np
import random
import math
import statistics as st

def paired_permute(x, y, mu = 0, nsims = 999, alternative = "two_sided"):
  
  xx = np.array(x)
  yy = np.array(y)
  diff = xx - yy
  mean_diff = st.mean(diff)
  SE = st.stdev(diff) / math.sqrt(len(diff))
  t_obs = (mean_diff - mu) / SE

  sign_list = [-1, 1]
  sim_vect = [None] * nsims
  
  for i in range(nsims):
    sign_vect = random.choices(sign_list, k = len(x))
    sign_array = np.array(sign_vect)
    sign_diff = sign_array * diff
    mean_sign_diff = st.mean(sign_diff)
    SE_sign = st.stdev(sign_diff) / math.sqrt(len(sign_diff))
    sim_vect[i] = (mean_sign_diff - mu) / SE_sign
    sim_array = np.array(sim_vect)
  
  sim_array = np.append(sim_array, t_obs)
  
  if t_obs >= 0 and alternative == "two_sided":
    p_val = 2 * (sum(sim_array >= t_obs) / len(sim_array))
  elif t_obs < 0 and alternative == "two_sided":
    p_val = 2 * (sum(sim_array <= t_obs) / len(sim_array))
  
  if alternative == "greater":
    p_val = sum(sim_array >= t_obs) / len(sim_array)
  elif alternative == "less":
    p_val = sum(sim_array <= t_obs) / len(sim_array)
  
  out_dict = {"t_score": t_obs, "P_value": p_val}

  print(f"t_score: {t_obs}")
  print(f"P_value: {p_val}")
  return out_dict