# -*- coding: utf-8 -*-
"""sign_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7AI_KMU1EYkqXYSMSpFOH36qt0ZA5Ky
"""

import csv
import pandas as pd
import numpy as np
from scipy.stats import binom, norm
import statistics as st

def sign_test(x, y = None, md = 0, alternative = "two_sided"):

  # One sample sign test
  if y is None:
    
    x_minus_md = [(i - md) for i in x]
    x_md_clean = [j for j in x_minus_md if j != 0]  # remove the zeroes
    n_adj = len(x_md_clean)  # sample size after removing the zeroes
    pos_count = len([k for k in x_md_clean if k > 0])

    med_count = st.median(np.arange(0, n_adj + 1))
    
    if (alternative == "two_sided") and (pos_count >= med_count):
      p_val = 2 * (1 - binom.cdf((pos_count - 1), n_adj, 0.5))
    elif pos_count < med_count:
      p_val = 2 * binom.cdf(pos_count, n_adj, 0.5)
  
    if alternative == "greater":
      p_val = 1 - binom.cdf(pos_count, n_adj, 0.5)
    elif alternative == "less":
      p_val = binom.cdf(pos_count, n_adj, 0.5)
      
  # Paired sign test
  elif y is not None:
    
    xx = np.array(x)
    yy = np.array(y)
    diff = xx - yy
    diff_list = diff.tolist()
    diff_clean = [j for j in diff_list if j != 0]
    n_adj = len(diff_clean)
    pos_count = len([k for k in diff_clean if k > 0])

    med_count = st.median(np.arange(0, n_adj + 1))

    if (alternative == "two_sided") and (pos_count >= med_count):
      p_val = 2 * (1 - binom.cdf((pos_count - 1), n_adj, 0.5))
    elif pos_count < med_count:
      p_val = 2 * binom.cdf(pos_count, n_adj, 0.5)

    if alternative == "greater":
      p_val = 1 - binom.cdf(pos_count, n_adj, 0.5)
    elif alternative == "less":
      p_val = binom.cdf(pos_count, n_adj, 0.5)

  print(med_count) 
  print(f"Number of positives: {pos_count} out of a sample size of {n_adj}")
  return(print(f"P_value: {p_val}"))

url = "/content/drive/MyDrive/Resources/Pine_stand.csv"
df = pd.read_csv(url)

# Test data for one sample sign test
lob_dbh = df[df["Species"] == "Loblolly pine"].dbh.to_list()
slash_dbh = df[df["Species"] == "Slash pine"].dbh.to_list()

# Actual medians for testing
print(df[df["Species"] == "Loblolly pine"].dbh.median())
print(df[df["Species"] == "Slash pine"].dbh.median())

# Test data for paired sign test
test1 = norm.rvs(size = 10, loc = 5, scale = 1)
test2 = norm.rvs(size = 10, loc = 5, scale = 1)
test3 = norm.rvs(size = 10, loc = 7, scale = 1)

sign_test(lob_dbh, md = 45)

sign_test(lob_dbh, md = 30)

2* (1 - binom.cdf(72, 83, 0.5))

sign_test(x = test1, y = test2)

sign_test(x = test1, y = test2, alternative = "greater")

sign_test(x = test1, y = test2, alternative = "less")

# note potentially low power in this case
sign_test(x = test1, y = test3)